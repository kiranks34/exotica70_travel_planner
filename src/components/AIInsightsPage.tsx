import React, { useState } from 'react';
import { ArrowLeft, DollarSign, Cloud, Globe, MessageCircle, Backpack, AlertTriangle, Phone, MapPin, Download, Share2, ArrowRight, ChevronLeft, ChevronRight } from 'lucide-react';
import { AITripInsights } from '../utils/aiTripConverter';

interface AIInsightsPageProps {
  insights: AITripInsights;
  destination: string;
  onBack: () => void;
  onStartPlanning: () => void;
}

export const AIInsightsPage: React.FC<AIInsightsPageProps> = ({ 
  insights, 
  destination, 
  onBack, 
  onStartPlanning 
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'cultural' | 'practical' | 'emergency'>('overview');

  const handleDownload = () => {
    const content = generateInsightsText();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${destination.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_travel_insights.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    const content = generateInsightsText();
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Travel Insights for ${destination}`,
          text: content,
        });
      } catch (err) {
        console.log('Error sharing:', err);
        copyToClipboard(content);
      }
    } else {
      copyToClipboard(content);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('Travel insights copied to clipboard!');
    }).catch(() => {
      alert('Failed to copy to clipboard');
    });
  };

  const generateInsightsText = () => {
    return `
TRAVEL INSIGHTS FOR ${destination.toUpperCase()}

💰 BUDGET ESTIMATE
Total estimated cost: $${insights.totalBudgetEstimate.toLocaleString()}

🌤️ WEATHER & TIMING
Best time to visit: ${insights.bestTimeToVisit}
Weather info: ${insights.weatherInfo}

🌍 LOCAL INFORMATION
Currency: ${insights.localCurrency}
Language: ${insights.languageInfo}

💬 CULTURAL TIPS
${insights.culturalTips.map(tip => `• ${tip}`).join('\n')}

🎒 PACKING RECOMMENDATIONS
${insights.packingRecommendations.map(item => `• ${item}`).join('\n')}

🚨 EMERGENCY INFORMATION
Emergency Number: ${insights.emergencyInfo.emergencyNumber}
${insights.emergencyInfo.nearestEmbassy ? `Embassy: ${insights.emergencyInfo.nearestEmbassy}` : ''}

Important Addresses:
${insights.emergencyInfo.importantAddresses.map(address => `• ${address}`).join('\n')}

Generated by Exotic70 Travel Planner
    `.trim();
  };

  const tabs = [
    { id: 'overview', label: 'Overview', icon: Globe },
    { id: 'cultural', label: 'Cultural', icon: MessageCircle },
    { id: 'practical', label: 'Practical', icon: Backpack },
    { id: 'emergency', label: 'Emergency', icon: AlertTriangle }
  ];

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 h-full">
            {/* Budget Overview */}
            <div className="bg-gradient-to-br from-green-50 to-emerald-100 rounded-2xl p-8 flex flex-col justify-center">
              <div className="text-center">
                <DollarSign className="h-16 w-16 text-green-600 mx-auto mb-6" />
                <h3 className="text-2xl font-bold text-gray-900 mb-4">Total Budget</h3>
                <div className="text-5xl font-bold text-green-600 mb-4">
                  ${insights.totalBudgetEstimate.toLocaleString()}
                </div>
                <p className="text-gray-700 text-lg">Estimated cost for your entire trip</p>
              </div>
            </div>

            {/* Weather & Best Time */}
            <div className="space-y-6">
              <div className="bg-gradient-to-br from-blue-50 to-sky-100 rounded-2xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Cloud className="h-8 w-8 text-blue-600" />
                  <h3 className="text-xl font-bold text-gray-900">Weather & Timing</h3>
                </div>
                <div className="space-y-4">
                  <div className="bg-white/70 rounded-xl p-4">
                    <p className="text-sm font-semibold text-blue-600 mb-1">Best Time to Visit</p>
                    <p className="text-gray-800 font-medium">{insights.bestTimeToVisit}</p>
                  </div>
                  <div className="bg-white/70 rounded-xl p-4">
                    <p className="text-sm font-semibold text-blue-600 mb-1">Weather Info</p>
                    <p className="text-gray-700">{insights.weatherInfo}</p>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-br from-purple-50 to-violet-100 rounded-2xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Globe className="h-8 w-8 text-purple-600" />
                  <h3 className="text-xl font-bold text-gray-900">Local Information</h3>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-white/70 rounded-xl p-4">
                    <p className="text-sm font-semibold text-purple-600 mb-1">Currency</p>
                    <p className="text-gray-800 font-medium">{insights.localCurrency}</p>
                  </div>
                  <div className="bg-white/70 rounded-xl p-4">
                    <p className="text-sm font-semibold text-purple-600 mb-1">Language</p>
                    <p className="text-gray-800 font-medium">{insights.languageInfo}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'cultural':
        return (
          <div className="bg-gradient-to-br from-orange-50 to-amber-100 rounded-2xl p-8 h-full">
            <div className="flex items-center space-x-3 mb-8">
              <MessageCircle className="h-10 w-10 text-orange-600" />
              <h3 className="text-2xl font-bold text-gray-900">Cultural Tips</h3>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 h-full">
              {insights.culturalTips.map((tip, index) => (
                <div key={index} className="bg-white/80 rounded-xl p-6 flex items-start space-x-4 hover:bg-white/90 transition-colors">
                  <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <span className="text-white font-bold text-sm">{index + 1}</span>
                  </div>
                  <p className="text-gray-800 leading-relaxed">{tip}</p>
                </div>
              ))}
            </div>
          </div>
        );

      case 'practical':
        return (
          <div className="bg-gradient-to-br from-indigo-50 to-blue-100 rounded-2xl p-8 h-full">
            <div className="flex items-center space-x-3 mb-8">
              <Backpack className="h-10 w-10 text-indigo-600" />
              <h3 className="text-2xl font-bold text-gray-900">Packing Essentials</h3>
            </div>
            <div className="grid grid-cols-2 lg:grid-cols-3 gap-4 h-full">
              {insights.packingRecommendations.map((item, index) => (
                <div key={index} className="bg-white/80 rounded-xl p-4 flex items-center space-x-3 hover:bg-white/90 transition-colors">
                  <div className="w-3 h-3 bg-indigo-500 rounded-full flex-shrink-0"></div>
                  <p className="text-gray-800 font-medium">{item}</p>
                </div>
              ))}
            </div>
          </div>
        );

      case 'emergency':
        return (
          <div className="bg-gradient-to-br from-red-50 to-rose-100 rounded-2xl p-8 h-full">
            <div className="flex items-center space-x-3 mb-8">
              <AlertTriangle className="h-10 w-10 text-red-600" />
              <h3 className="text-2xl font-bold text-gray-900">Emergency Information</h3>
            </div>
            <div className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-white/80 rounded-xl p-6 text-center">
                  <Phone className="h-12 w-12 text-red-600 mx-auto mb-4" />
                  <p className="text-sm font-semibold text-red-600 mb-2">Emergency Number</p>
                  <p className="text-3xl font-bold text-gray-900">{insights.emergencyInfo.emergencyNumber}</p>
                </div>
                
                {insights.emergencyInfo.nearestEmbassy && (
                  <div className="bg-white/80 rounded-xl p-6">
                    <MapPin className="h-8 w-8 text-red-600 mb-4" />
                    <p className="text-sm font-semibold text-red-600 mb-2">Embassy</p>
                    <p className="text-gray-800 font-medium">{insights.emergencyInfo.nearestEmbassy}</p>
                  </div>
                )}
              </div>
              
              {insights.emergencyInfo.importantAddresses.length > 0 && (
                <div className="bg-white/80 rounded-xl p-6">
                  <p className="text-lg font-bold text-gray-900 mb-4">Important Addresses</p>
                  <div className="space-y-3">
                    {insights.emergencyInfo.importantAddresses.map((address, index) => (
                      <div key={index} className="flex items-start space-x-3 p-3 bg-white/60 rounded-lg">
                        <MapPin className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                        <p className="text-gray-800">{address}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 flex-shrink-0">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={onBack}
                className="text-gray-600 hover:text-orange-500 transition-colors p-2 rounded-lg hover:bg-gray-100"
              >
                <ArrowLeft className="h-6 w-6" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  AI Travel Insights
                </h1>
                <p className="text-orange-600 font-medium">{destination}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleDownload}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors font-medium"
              >
                <Download className="h-4 w-4" />
                <span>Download</span>
              </button>
              
              <button
                onClick={handleShare}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors font-medium"
              >
                <Share2 className="h-4 w-4" />
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white border-b border-gray-200 flex-shrink-0">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              const isActive = activeTab === tab.id;
              
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                    isActive
                      ? 'border-orange-500 text-orange-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{tab.label}</span>
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Content Area */}
      <div className="flex-1 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex flex-col">
        {/* Start Planning Button - Above the fold */}
        <div className="flex justify-center mb-8">
          <button
            onClick={onStartPlanning}
            className="flex items-center space-x-3 bg-gradient-to-r from-orange-500 to-red-500 text-white px-8 py-4 rounded-xl font-semibold hover:from-orange-600 hover:to-red-600 transition-all transform hover:scale-105 text-lg shadow-lg"
          >
            <span>Start Planning Your Trip</span>
            <ArrowRight className="h-6 w-6" />
          </button>
        </div>
        
        <div className="flex-1">
          {renderTabContent()}
        </div>
      </div>
    </div>
  );
};