import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  Download, 
  Share2, 
  Copy, 
  Check, 
  Calendar, 
  MapPin, 
  DollarSign,
  Clock,
  Users,
  Star,
  Lightbulb,
  FileText,
  Mail,
  MessageCircle
} from 'lucide-react';

interface SummaryData {
  trip: any;
  dayItineraries: any[];
  tripType: string;
  aiInsights?: any;
  summaryContent: string;
  removedCount: number;
}

export const ItinerarySummaryPage: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [summaryData, setSummaryData] = useState<SummaryData | null>(null);
  const [copied, setCopied] = useState(false);
  const [shareEmail, setShareEmail] = useState('');
  const [showShareModal, setShowShareModal] = useState(false);

  useEffect(() => {
    const storedData = sessionStorage.getItem('itinerarySummary');
    if (storedData) {
      setSummaryData(JSON.parse(storedData));
    }
  }, []);

  const handleDownload = () => {
    if (!summaryData) return;

    const content = `${summaryData.summaryContent}

---
Generated by Exotic70 Travel Planner
${window.location.origin}`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${summaryData.trip.destination.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_itinerary.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy link:', err);
    }
  };

  const handleShare = async () => {
    const shareData = {
      title: `${summaryData?.trip.destination} Travel Itinerary`,
      text: `Check out my travel itinerary for ${summaryData?.trip.destination}!`,
      url: window.location.href,
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Error sharing:', err);
        setShowShareModal(true);
      }
    } else {
      setShowShareModal(true);
    }
  };

  const handleEmailShare = () => {
    if (!summaryData || !shareEmail) return;

    const subject = encodeURIComponent(`${summaryData.trip.destination} Travel Itinerary`);
    const body = encodeURIComponent(`Hi!

I've planned an amazing trip to ${summaryData.trip.destination} and wanted to share the itinerary with you!

${summaryData.summaryContent}

You can view the full interactive itinerary here: ${window.location.href}

Let me know if you'd like to join or have any suggestions!

Best regards`);

    window.open(`mailto:${shareEmail}?subject=${subject}&body=${body}`);
    setShareEmail('');
    setShowShareModal(false);
  };

  if (!summaryData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your itinerary summary...</p>
        </div>
      </div>
    );
  }

  const { trip, dayItineraries, tripType, summaryContent, removedCount } = summaryData;
  const totalActivities = dayItineraries.reduce((total, day) => total + day.activities.length, 0);
  const totalBudget = dayItineraries.reduce((total, day) => 
    total + day.activities.reduce((dayTotal: number, activity: any) => 
      dayTotal + (activity.cost || 0), 0), 0);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate(-1)}
                className="text-gray-600 hover:text-orange-500 transition-colors"
              >
                <ArrowLeft className="h-6 w-6" />
              </button>
              <div>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-900">
                  Final Itinerary Summary
                </h1>
                <p className="text-gray-600 mt-1">{trip.destination}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleDownload}
                className="flex items-center space-x-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-xl hover:bg-blue-200 transition-colors font-medium"
              >
                <Download className="h-4 w-4" />
                <span>Download</span>
              </button>
              
              <button
                onClick={handleCopyLink}
                className="flex items-center space-x-2 bg-gray-100 text-gray-700 px-4 py-2 rounded-xl hover:bg-gray-200 transition-colors font-medium"
              >
                {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                <span>{copied ? 'Copied!' : 'Copy Link'}</span>
              </button>
              
              <button
                onClick={handleShare}
                className="flex items-center space-x-2 bg-orange-500 text-white px-4 py-2 rounded-xl hover:bg-orange-600 transition-colors font-medium"
              >
                <Share2 className="h-4 w-4" />
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Success Message */}
        {removedCount > 0 && (
          <div className="bg-green-50 border border-green-200 rounded-xl p-4 mb-6">
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5 text-green-600" />
              <p className="text-green-800 font-medium">
                Itinerary finalized! Removed {removedCount} activities based on voting results.
              </p>
            </div>
          </div>
        )}

        {/* Trip Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <Calendar className="h-8 w-8 text-blue-600 mx-auto mb-3" />
            <div className="text-2xl font-bold text-gray-900">
              {Math.ceil((new Date(trip.endDate).getTime() - new Date(trip.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1}
            </div>
            <div className="text-sm text-gray-600">Days</div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <MapPin className="h-8 w-8 text-green-600 mx-auto mb-3" />
            <div className="text-2xl font-bold text-gray-900">{totalActivities}</div>
            <div className="text-sm text-gray-600">Activities</div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <DollarSign className="h-8 w-8 text-orange-600 mx-auto mb-3" />
            <div className="text-2xl font-bold text-gray-900">${totalBudget}</div>
            <div className="text-sm text-gray-600">Total Budget</div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <Star className="h-8 w-8 text-purple-600 mx-auto mb-3" />
            <div className="text-2xl font-bold text-gray-900 capitalize">{tripType}</div>
            <div className="text-sm text-gray-600">Trip Style</div>
          </div>
        </div>

        {/* AI Generated Summary */}
        <div className="bg-white rounded-xl shadow-sm p-8 mb-8">
          <div className="flex items-center space-x-3 mb-6">
            <FileText className="h-6 w-6 text-orange-500" />
            <h2 className="text-xl font-bold text-gray-900">Complete Itinerary</h2>
            <span className="bg-purple-100 text-purple-700 px-2 py-1 rounded-full text-xs font-medium">
              AI Enhanced
            </span>
          </div>
          
          <div className="max-w-none">
            <div className="whitespace-pre-wrap text-gray-700 leading-relaxed text-base">
              {summaryContent}
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Share Your Adventure</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={() => setShowShareModal(true)}
              className="flex items-center space-x-3 bg-white p-4 rounded-lg hover:shadow-md transition-all"
            >
              <Mail className="h-5 w-5 text-blue-600" />
              <div className="text-left">
                <div className="font-medium text-gray-900">Email Friends</div>
                <div className="text-sm text-gray-600">Send via email</div>
              </div>
            </button>

            <button
              onClick={handleShare}
              className="flex items-center space-x-3 bg-white p-4 rounded-lg hover:shadow-md transition-all"
            >
              <MessageCircle className="h-5 w-5 text-green-600" />
              <div className="text-left">
                <div className="font-medium text-gray-900">Social Share</div>
                <div className="text-sm text-gray-600">Share on social media</div>
              </div>
            </button>

            <button
              onClick={handleDownload}
              className="flex items-center space-x-3 bg-white p-4 rounded-lg hover:shadow-md transition-all"
            >
              <Download className="h-5 w-5 text-purple-600" />
              <div className="text-left">
                <div className="font-medium text-gray-900">Download PDF</div>
                <div className="text-sm text-gray-600">Save for offline</div>
              </div>
            </button>
          </div>
        </div>
      </div>

      {/* Share Modal */}
      {showShareModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Share via Email</h3>
              <button
                onClick={() => setShowShareModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              <input
                type="email"
                value={shareEmail}
                onChange={(e) => setShareEmail(e.target.value)}
                placeholder="Enter email address"
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-orange-500 focus:ring-2 focus:ring-orange-100 outline-none transition-all"
              />
              
              <div className="flex space-x-3">
                <button
                  onClick={() => setShowShareModal(false)}
                  className="flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleEmailShare}
                  disabled={!shareEmail}
                  className="flex-1 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Send Email
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};